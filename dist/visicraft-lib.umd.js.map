{"version":3,"file":"visicraft-lib.umd.js","sources":["../src/datastore/races.ts","../src/datastore/index.ts","../src/visicraft_client_options.ts","../src/visicraft_client.ts"],"sourcesContent":["import {RxCollection, RxDocument, RxJsonSchema} from \"rxdb\";\nimport {VisicraftDatastore} from \".\";\n\nexport type RaceDocumentType = {\n    identifier: string;\n\n    description: string;\n\n    summary: string;\n\n    title: string;\n};\n\nexport type RaceDocumentMethods = {};\n\nexport type RaceCollectionMethods = {};\n\nexport type RaceDocument = RxDocument<RaceDocumentType, RaceDocumentMethods>;\n\nexport type RaceCollection = RxCollection<\n    RaceDocumentType,\n    RaceDocumentMethods,\n    RaceCollectionMethods\n>;\n\nexport const RACE_COLLECTION_METHODS: RaceCollectionMethods = {};\n\nexport const RACE_DOCUMENT_METHODS: RaceDocumentMethods = {};\n\nexport const RACE_DOCUMENT_SCHEMA: RxJsonSchema<RaceDocumentType> = {\n    title: \"races\",\n    description: \"Schema for validating internally stored WCS Races\",\n    version: 0,\n\n    keyCompression: true,\n\n    required: [\"description\", \"summary\", \"title\"],\n    type: \"object\",\n\n    properties: {\n        identifier: {\n            type: \"string\",\n            primary: true\n        },\n\n        description: {type: \"string\"},\n        summary: {type: \"string\"},\n        title: {type: \"string\"}\n    }\n};\n\n/**\n * Creates the Race collection on the datastore, if not previously existed\n */\nexport function create_collection(datastore: VisicraftDatastore): Promise<void> {\n    return datastore.collection({\n        name: \"races\",\n\n        methods: RACE_DOCUMENT_METHODS,\n        schema: RACE_DOCUMENT_SCHEMA,\n        statics: RACE_COLLECTION_METHODS\n    });\n}\n","import {RxDatabase} from \"rxdb\";\n\nimport {RaceCollection, create_collection as create_races_collection} from \"./races\";\n\nexport type VisicraftCollections = {\n    races: RaceCollection;\n};\n\nexport type VisicraftDatastore = RxDatabase<VisicraftCollections>;\n\n/**\n * Creates the various collections on the datastores, if they don't already exist\n */\nexport function create_collections(datastore: VisicraftDatastore): Promise<void[]> {\n    const promise = Promise.all([create_races_collection(datastore)]);\n\n    return promise;\n}\n","import * as RxDB_namespace from \"rxdb\";\n\nimport {VisicraftDatastore, VisicraftCollections} from \"./datastore\";\n\n// HACK: Due to current Rollup not working well with packaging up RxDB,\n// `visicraft-lib` supports utilizing the browserify build that populates `window.*`\nconst RxDB = (function(): typeof RxDB_namespace {\n    if (typeof window !== \"undefined\") {\n        const _RxDB: typeof RxDB_namespace = (<any>window).RxDB;\n        if (_RxDB) return _RxDB;\n\n        throw new Error(\"bad import from 'visicraft-lib' (could not locate 'rxdb')\");\n    }\n\n    return require(\"rxdb\");\n})();\n\n// Allow `rxdb` to utilize memory as a datastore\n//const adapter: any = require(\"pouchdb-adapter-memory/lib/index.es\");\n//RxDB.plugin(adapter);\n\n/**\n * Represents the interface of options used to configured the initialized datastore\n */\nexport interface IDatastoreOptions {\n    /**\n     * Represents what type of adapter will be used for persistence, (check out plugins for RxDB)\n     */\n    adapter?: string;\n\n    /**\n     * Represents the namespace that the datastore will be persisted as\n     */\n    namespace?: string;\n}\n\n/**\n * Represents the interface of options used to configure a `VisicraftClient` instance\n */\nexport interface IVisicraftClientOptions {\n    /**\n     * Represents the options passed into configuring the datastore\n     */\n    datastore?: IDatastoreOptions;\n}\n\n/**\n * Represents the normalized options used to configure the initialized datastore\n */\nexport class DatastoreOptions implements IDatastoreOptions {\n    adapter = \"memory\";\n\n    namespace = \"visicraft_v1\";\n\n    /**\n     * Constructor for `DatastoreOptions`\n     */\n    constructor(options: IDatastoreOptions = {}) {\n        Object.assign(this, options);\n    }\n}\n\n/**\n * Represents the options used to configure a `VisicraftClient` instance\n */\nexport class VisicraftClientOptions implements IVisicraftClientOptions {\n    datastore: DatastoreOptions;\n\n    /**\n     * Constructor for `VisicraftClientOptions`\n     */\n    constructor(options: IVisicraftClientOptions = {}) {\n        this.datastore = new DatastoreOptions(options.datastore);\n    }\n\n    /**\n     * Returns the initialized datastore instance\n     */\n    create_datastore(): Promise<VisicraftDatastore> {\n        const {adapter, namespace} = this.datastore;\n\n        return RxDB.create<VisicraftCollections>({\n            adapter: adapter,\n            name: namespace,\n            queryChangeDetection: true\n        });\n    }\n}\n","import {VisicraftDatastore, create_collections} from \"./datastore\";\nimport {IVisicraftClientOptions, VisicraftClientOptions} from \"./visicraft_client_options\";\n\n/**\n * Represents the class used for base functionality of Visicraft clients\n */\nexport class VisicraftClient {\n    /**\n     * Represents the initialized datastore, if previously opened\n     */\n    datastore?: VisicraftDatastore;\n\n    /**\n     * Represents the options that `VisicraftClient` was constructed with\n     */\n    options: VisicraftClientOptions;\n\n    /**\n     * Constructor for `VisicraftClient`\n     * @param opts - Configurable options to pass in\n     */\n    constructor(opts: IVisicraftClientOptions = {}) {\n        this.options = new VisicraftClientOptions(opts);\n    }\n\n    /**\n     * Closes the connection to the current datastore\n     */\n    async close_datastore(): Promise<boolean> {\n        const datastore = this.get_datastore();\n\n        const destroyed = await datastore.destroy();\n        if (destroyed) this.datastore = undefined;\n\n        return destroyed;\n    }\n\n    /**\n     * Initializes a new connection to the configured datastore\n     */\n    async open_datastore(): Promise<VisicraftDatastore> {\n        if (this.datastore) {\n            throw new Error(\n                \"bad dispatch to 'VisicraftClient.open_datastore' (datastore already initialized)\"\n            );\n        }\n\n        const datastore = await this.options.create_datastore();\n        await create_collections(datastore);\n\n        this.datastore = datastore;\n        return datastore;\n    }\n\n    /**\n     * Returns the current datastore connection, if any, otherwise throws an exception\n     */\n    get_datastore(): VisicraftDatastore {\n        if (this.datastore) return this.datastore;\n\n        throw new Error(\"bad dispatch to 'get_datastore' (datastore not initialized)\");\n    }\n}\n"],"names":["create_races_collection"],"mappings":"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"}